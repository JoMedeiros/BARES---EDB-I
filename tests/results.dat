===============================================================================
>>> Parsing "10"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <10,OPERAND> }
===============================================================================
>>> Parsing "12    +    4   8"
>>> Extraneous symbol after valid expression found at column (15)!
"12    +    4   8"
                ^ 
>>> Tokens: { <12,OPERAND> <+,OPERATOR> <4,OPERAND> }
===============================================================================
>>> Parsing "32767 - 32768 + 3"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <32767,OPERAND> <-,OPERATOR> <32768,OPERAND> <+,OPERATOR> <3,OPERAND> }
===============================================================================
>>> Parsing "5 + -32766"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <5,OPERAND> <+,OPERATOR> <-32766,OPERAND> }
===============================================================================
>>> Parsing "5 + -32769"
>>> Integer constant out of range beginning at column (4)!
"5 + -32769"
     ^      
>>> Tokens: { <5,OPERAND> <+,OPERATOR> }
===============================================================================
>>> Parsing "12 + 3"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <12,OPERAND> <+,OPERATOR> <3,OPERAND> }
===============================================================================
>>> Parsing "3+-5+-6"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <3,OPERAND> <+,OPERATOR> <-5,OPERAND> <+,OPERATOR> <-6,OPERAND> }
===============================================================================
>>> Parsing "12 + 3     -3 + -34"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <12,OPERAND> <+,OPERATOR> <3,OPERAND> <-,OPERATOR> <3,OPERAND> <+,OPERATOR> <-34,OPERAND> }
===============================================================================
>>> Parsing "12"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <12,OPERAND> }
===============================================================================
>>> Parsing "1.3 * 4"
>>> Extraneous symbol after valid expression found at column (1)!
"1.3 * 4"
  ^      
>>> Tokens: { <1,OPERAND> }
===============================================================================
>>> Parsing "a + 4"
>>> Ill formed integer at column (0)!
"a + 4"
 ^     
>>> Tokens: { }
===============================================================================
>>> Parsing "       "
>>> Ill formed integer at column (7)!
"       "
        ^
>>> Tokens: { }
===============================================================================
>>> Parsing "123 *  548"
>>> Extraneous symbol after valid expression found at column (4)!
"123 *  548"
     ^      
>>> Tokens: { <123,OPERAND> }
===============================================================================
>>> Parsing "2 + ---3"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <2,OPERAND> <+,OPERATOR> <-3,OPERAND> }
===============================================================================
>>> Parsing "35 - 3 * (-2 + 5)^2"
>>> Extraneous symbol after valid expression found at column (7)!
"35 - 3 * (-2 + 5)^2"
        ^            
>>> Tokens: { <35,OPERAND> <-,OPERATOR> <3,OPERAND> }
===============================================================================
>>> Parsing "54 / 3 ^ (12%5) * 2"
>>> Extraneous symbol after valid expression found at column (3)!
"54 / 3 ^ (12%5) * 2"
    ^                
>>> Tokens: { <54,OPERAND> }
===============================================================================
>>> Parsing "((2-3)*10 - (2^3*5))"
>>> Ill formed integer at column (0)!
"((2-3)*10 - (2^3*5))"
 ^                    
>>> Tokens: { }
===============================================================================
>>> Parsing "---3 + 4"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <-3,OPERAND> <+,OPERATOR> <4,OPERAND> }

>>> Normal exiting...

Lista de Tokens:
-3+4